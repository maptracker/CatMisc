% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CatMisc.R
\name{is.empty.field}
\alias{is.empty.field}
\title{Is Empty Field}
\usage{
is.empty.field(x, zero.length.empty = FALSE)
}
\arguments{
\item{x}{The object to be tested}

\item{zero.length.empty}{Default FALSE, if true then count a
zero-length vector as an empty field (returns TRUE)}
}
\value{
TRUE if x inherits class "uninitializedField", otherwise FALSE
}
\description{
Tests for ReferenceClass fields that have not been set.
}
\details{
Some RefClass fields will be automatically set, even if you try not
to. For example, simple fields (numeric, character, logical, etc)
will be unavaoidably (?) set to a zero-length vector of the
appropriate type.

A field defined as 'ANY', however, can not auto-populate. If left
unset, it will be represented as a little Slot object of class
"uninitializedField". This function simply tests if the provided
object inherits that class
}
\examples{

## Simple object with two fields, one numeric, the other ANY
foo <- setRefClass("foo", fields = list( x = 'numeric', y = 'ANY' ))
foo$methods( initialize = function(...) {
    ## Don't do anything. This should override (?) the default
    ## $initFields() call.
});

fooObj <- foo()

## $x will be an zero-element numeric vector. 
str(fooObj$x)
## It is not considered an empty field:
is.empty.field(fooObj$x)
## ... unless you ask for such cases to test positive:
is.empty.field(fooObj$x, zero.length.empty=TRUE)

## $y will be a small object:
str(fooObj$y)
## And will report as being an empty field:
is.empty.field(fooObj$y)

}
