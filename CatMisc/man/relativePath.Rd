% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CatMisc.R
\name{relativePath}
\alias{relativePath}
\title{Relative Path}
\usage{
relativePath(parent, child, mustWork = FALSE)
}
\arguments{
\item{parent}{Required, the file path that presumably is an
ancestor of the child in the directory structure. To return a
non-NA value, this object presumably needs to resolve to a
directory.}

\item{child}{Required, the file path of the "deeper" object (can be
any component of the file system - file, directory, link, etc.}

\item{mustWork}{Default \code{FALSE}. Passed to normalizePath, set
to TRUE if you wish to assure that both child and parent exist.}
}
\value{
If either child or parent are any of \code{NULL}, \code{NA}
    or an empty string, then \code{NA}. If child is the same as
    parent (after normalization), an empty string. If child is not
    a descendant of the parent, \code{NA}. In all other cases, a
    single string representing the relative path.
}
\description{
Reports the relative file path from a parent directory to a child object
}
\details{
Given 'child' and 'parent' file paths, return the relative path
needed to reach the child from the parent, or \code{NA} if the
child is not a descendant of the parent.

By default, neither child nor parent will be checked for existance,
or if they are an appropriate object. Both will have their paths
normalized via \code{normalizePath()}. If you wish to force
existance of both, set \code{mustWork=TRUE}.
}
\examples{

relativePath("/tmp/RtmpaacRRB", "/tmp/RtmpaacRRB/output.txt")
relativePath(file.path(Sys.getenv('HOME'), "data"), "~/data/plots/x.png")
relativePath("/bin/bang/boom", "/bin/etc/etc/etc.txt")
relativePath("/usr/bin", "")

}
